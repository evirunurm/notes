Type system:
	Overview:
		Strongly typed:
			A method declaration specifies a name, type and kind of each input parameter and return value.
				Kind: value, reference, output.
			.NET class library --> built-in numeric types and complex types
				- File system
				- Network connections
				- Collections and arrays
				- Dates
			Information stored in a type:
				- Storage space a variable requires.
				- Max / min values represented.
				- Members it contains (methods, fields, events...).
				- Base type it inherits from.
				- Interfaces it implements.
				- Kinds of operations permitted.
			Compiler embeds the type information into the executable file as metadata. CLR uses that at runtime to guarantee type safety (allocation and reclaim of memory).

		Variable declaration:
			When declaring variable --> specify type or "var" keyword (type inferring).
			Redeclaring variable:
				You can't assign a value noy compatible with its declared type.
				But, values can be converted to other types (assigned to new variables, passed as arguments).
					- No data loss --> Automatic type conversion
					- Data loss --> Cast
		Custom types:
			- struct, class, interface, enum and record --> constructs.
		Common type system: (.NET)
			- Supports the principle of inheritance.
			- Each type is defined as either a value type (structs, record struct) or reference type (class, record class).
			Each type --> data structure, encapsulates a set of data / behaviors (members).
			Types:
				- Class (REFERENCE):
					When an instance of a class is assigned to another value, it's assign to the same original object.
				- Struct (VALUE):
					When an instance of a struct is assigned to another value, it's copied.
				- Record (REFERENCE / VALUE):
		Value types:
			--> Struct / Enum
				Derive from System.ValueType (derives from System.Object).
				Variables directly contain their values.
				No heap allocation / garbage collection.
				Value types --> Sealed
					So if you cast to teat it as an Interface it implements --> BOXING, wrap the struct inside a reference type object.
			Struct:
				Container for small set of related variables (Coordinates...)
			Enum:
				Defines a set of names integral constants.
		Reference types:
			class / record / delegate / array / interface
			Contains value null until assigned.
			Fully support inheritance from anything that isn't sealed.
		Literal values:
			In C# literal values receive a type from the compiler.
			To specify a value of a numeric literal, you can append a letter to the end of the number ("f" for float).
		Generic Types:
			Reuse the same class to hold any type of element, without converting each element to Object.
			Generic collection classes = Strongly typed collections.
		Implicit types, nullable types:
			"var" keyword --> receives type at compile time, by the compiler.
			"?" after the type --> nullable type (int?).

	Namespaces:
		Uses:
			- Class organization (.NET)
				"using" directive obviated the requirement to specify the name of the namespace.
				.NET 6 SDK adds implicit global "using" directives
					- Microsoft.NET.Sdk
					- Microsoft.NET.Sdk.Web
					- Microsoft.NET.Sdk.Worker
					--> "global" namespace is the root.
			- Scope control of class and method names for large projects.
				C# 10+ --> a namespace can be declared for all types in that file as:
					namespace SampleNamespace;

	Classes:
		Reference type, contains null until instantiated.
		Class members: fields, properties, methods and events.
		Inheritance:	public class Son : Parent { //... }
			Inherits all the members except the constructors.
			Child can only inherit from one base class.
			"abstract": (Same as Java)
				- Can't be instantiated.
				- Must be derived from.
			"sealed": (Similar to final)
				- Cannot be derived from.

	Records:
		Class/struct that provides special syntax and behavior for working with data models.
		Uses:
			- Define a data model that depends on value equality.
			- Define a type for which objects are immutable.
		Value equality:
			Two variables of a record type are equal if the types and all property / field values match.
		Immutability:
			Prevents you from changing any property or field value after it's instantiated.
		Differences with classes:
			- Positional parameters can be used --> create a type with immutable properties.
				public record struct DataMeasurement(DateTime TakenAt, double Measurement);
			- Value equality with == or Object.Equals(Object).
			- "with" expression can be used --> create a copy (Nondestructive mutation).
				 Person person2 = person1 with { FirstName = "John" };
			- ToString() --> formatted string: type name, names and values of public properties.
			- Can't inherit from a class, nor class can inherit from a record.
		Differences with structs:
			- Compiler synthesizes the methods for equality and ToString().
			- Compiler synthesizes a Deconstruct method for positional record structs.

	Interfaces:
		Contains definitions for a group of related functionalities that a non-abstract class/struct must implement.
		Static methods: must have an implementation.
		C# 8.0 --> Default implementation for members.
			No instance data (fields, auto-implemented properties, property-like events).
		As structs can't inherit from other structs or classes, in order to define a behavior you must use interfaces.
		Members are public by default.
			- public
			- protected
			- internal
			- private
			- protected internal
			- private protected

	Generics:
























